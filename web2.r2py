dy_import_module_symbols("sensorlib.r2py")

port = get_connectionport()
sensor_socket = getconnection(port)



def render(ip, port, sockobj):
  # Receive the browser's HTTP request header, but we'll ignore it
  httpheader = sockobj.recv(512)
  response_body = createProfile()
  # Send a simple HTTP header before the actual HTML
  sockobj.send("HTTP/1.1 200 OK\r\nContent-Length: " +
    str(len(response_body)) + "\r\n\r\n" + response_body)
  # close my connection with this user
  sockobj.close()


def grabSensorData():
  measurements = {}
  measurements['scan_results'] = request_data(sensor_socket, 'wifiGetScanResults', [])
  measurements['location'] = request_data(sensor_socket, 'readLocation', [])
  return measurements

"""
Use this function to create the basic HTML template for the UI end. We should
also add OpenDHT to this to allow for phones to track down who's been near eachother
at a particular time.
"""
def createProfile():
  response =  "<html><head><title>"+str(getmyip())+"</title></head>"
  response += "<body>"
  response += "<h1>Scanned Wifi Routers:</h1>"
  response += "<table>"
  for x in range(0, len(grabSensorData().get('scan_results'))):
    response += "<tr>"
    response += "<td>"
    response += str(grabSensorData().get('scan_results')[x]['ssid']) + " (" + str(grabSensorData().get('scan_results')[x]['bssid']) + ")"
    response += "</td>"
    response += "</tr>"
  response += "</table>"
  response += "</body></html>"
  return response



if len(callargs) > 1:
  raise Exception("Too many call arguments")
log('Started at -- http://'+str(getmyip())+':'+str(63131))
server_socket = listenforconnection(getmyip(), 63131)

while True:
  try:
    ret_ip, ret_port, ret_socket = server_socket.getconnection()
    render(ret_ip, ret_port, ret_socket)

  except SocketWouldBlockError:
    sleep(0.1)
